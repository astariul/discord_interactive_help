{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Discord Interactive Help","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the documentation of the <code>discord_interactive</code> package.</p> <p><code>discord_interactive</code> helps you build an interactive help for your Discord bot easily.</p> <p>This is an alternative way to engage with a Discord bot, offering a more intuitive approach than the traditional command message method.</p> <p></p> <p>Users can interact with the bot using reactions, making it a more natural way to read multiple pages (for a help manual for example).</p>"},{"location":"#installation","title":"Installation","text":""},{"location":"#latest-version","title":"Latest version","text":"<p>You can install the latest version of the package directly from PyPi with :</p> <pre><code>pip install discord-interactive\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/astariul/discord_interactive_help.git\n</code></pre></p>"},{"location":"#specific-version","title":"Specific version","text":"<p>You can install a specific version of the package (<code>3.0.0</code> in this example) from PyPi with :</p> <pre><code>pip install discord-interactive==3.0.0\n</code></pre> <p>Hint</p> <p>If you want to install directly from Github, run : <pre><code>pip install git+https://github.com/astariul/discord_interactive_help.git@v3.0.0\n</code></pre></p>"},{"location":"#local","title":"Local","text":"<p>You can also clone the repository locally and install it manually :</p> <pre><code>git clone https://github.com/astariul/discord_interactive_help.git\ncd pytere\npip install -e .\n</code></pre>"},{"location":"#extra-dependencies","title":"Extra dependencies","text":"<p>You can also install extras dependencies, for example :</p> <pre><code>pip install -e .[docs]\n</code></pre> <p>Will install necessary dependencies for building the docs.</p> <p>Hint</p> <p>If you installed the package directly from github, run : <pre><code>pip install \"discord-interactive[docs] @ https://github.com/astariul/discord_interactive_help.git\"\n</code></pre></p> <p>List of extra dependencies :</p> <ul> <li><code>hook</code> : Dependencies for running pre-commit hooks.</li> <li><code>lint</code> : Dependencies for running linters and formatters.</li> <li><code>docs</code> : Dependencies for building the documentation.</li> <li><code>dev</code> : <code>hook</code> + <code>lint</code> + <code>docs</code>.</li> <li><code>all</code> : All extra dependencies.</li> </ul>"},{"location":"#contribute","title":"Contribute","text":"<p>To contribute, install the package locally (see Installation), create your own branch, add your code (and documentation), and open a PR !</p>"},{"location":"#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>Pre-commit hooks are set to check the code added whenever you commit something.</p> <p>When you try to commit your code, hooks are automatically run, and if you code does not meet the quality required by linters, it will not be committed. You then have to fix your code and try to commit again !</p> <p>Important</p> <p>If you never ran the hooks before, install it with : <pre><code>pre-commit install\n</code></pre></p> <p>Info</p> <p>You can manually run the pre-commit hooks with : <pre><code>pre-commit run --all-files\n</code></pre></p>"},{"location":"#documentation","title":"Documentation","text":"<p>When you contribute, make sure to keep the documentation up-to-date.</p> <p>You can visualize the documentation locally by running :</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"code_ref/","title":"discord_interactive","text":""},{"location":"code_ref/#exposed-classes","title":"Exposed classes","text":"<p>Module containing the definition of the <code>Help</code> class. The <code>Help</code> class contains the code to properly display the help tree, and handle interactions with the user.</p> <p>Module containing the definition of the <code>Page</code> class, which is the main class to define the pages of your interactive help for your Discord bot.</p>"},{"location":"code_ref/#discord_interactive.help.Help","title":"<code>Help</code>","text":"<p>Class representing the whole Help system.</p> <p>Attributes:</p> Name Type Description <code>client</code> <code>Discord.Client</code> <p>Discord client (to send messages).</p> <code>tree</code> <code>RootLink</code> <p>Link representing the whole help pages as a tree.</p> <code>quit_react</code> <code>str</code> <p>Reaction used to leave the help system..</p> Source code in <code>discord_interactive/help.py</code> <pre><code>class Help:\n\"\"\"Class representing the whole Help system.\n\n    Attributes:\n        client (Discord.Client): Discord client (to send messages).\n        tree (RootLink): Link representing the whole help pages as a tree.\n        quit_react (str): Reaction used to leave the help system..\n    \"\"\"\n\n    def __init__(self, client, pages, callbacks=[], quit_react=DEFAULT_QUIT_REACT):\n\"\"\"Help constructor.\n\n        Args:\n            client (Discord.Client): Discord client (to send messages).\n            pages (list of Page or Page): List of pages representing the\n                starting point of the help.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n            quit_react (str, optional): Reaction used to leave the help system.\n                Defaults to `\u274c`.\n        \"\"\"\n        self.client = client\n        self.quit_react = quit_react\n\n        # Create a RootLink, representing the root of the help tree\n        root = RootLink(pages, callbacks)\n        self.tree = root\n\n    async def display(self, member):  # noqa: C901\n\"\"\"Main function of the Help system.\n\n        This function is the main function of the help system. When a user\n        request help, simply call this function.\n        It will display the first message of the help, and then wait the user to\n        react. Depending on the reaction, it will display the next page, etc...\n\n        Args:\n            member (Discord.Member): Member who called help. Help will be\n                displayed as a private message to him.\n        \"\"\"\n        current_link = self.tree\n        prev_input = []\n\n        # Never stop displaying help\n        while True:\n            # Run basic callbacks before displaying the page\n            for callback in current_link.callbacks:\n                await callback(current_link, member, prev_input)\n\n            # After running the callbacks, we can retrieve the page to be\n            # displayed\n            page = current_link.page()\n\n            # Send the current page to the user as private message :\n            # Ensure the channel exist\n            if member.dm_channel is None:\n                await member.create_dm()\n\n            # Different page type should be sent differently\n            if page.type == PageType.MESSAGE:\n                bot_message = await member.dm_channel.send(page.get_message())\n            elif page.type == PageType.EMBED:\n                bot_message = await member.dm_channel.send(embed=page.get_embed(), content=None)\n\n            # Display possible reactions\n            for react in page.reactions() + [self.quit_react]:\n                asyncio.ensure_future(bot_message.add_reaction(react))\n\n            next_link = None\n            # While user give wrong reaction/input, keep waiting for better input\n            while next_link is None:\n                # Get user input\n                reaction, message = await self._get_user_input(member, bot_message, page)\n\n                # 2 cases : reaction or message\n                if reaction is not None and message is None:\n                    # If the user wants to quit, quit\n                    if reaction.emoji == self.quit_react:\n                        # Clean and quit. This is the only way to quit for now\n                        await bot_message.delete()\n                        return\n\n                    # Else, retrieve the next link based on reaction\n                    next_link = page.next_link(reaction.emoji)\n\n                elif reaction is None and message is not None:\n                    # Retrieve next link\n                    next_link = page.next_link()\n\n            # Before going to next page, remember the input of the user if given\n            if message is not None:\n                prev_input.append(message)\n\n            # Here the next page is valid. Clean current message and loop\n            await bot_message.delete()\n            current_link = next_link\n\n    async def _get_user_input(self, member, message, current_page):\n\"\"\"Function retrieving the user input.\n\n        This function retrieve the user input. The user input is either a\n        message or a reaction (if the page does not need user input, only\n        reaction will be an acceptable input).\n        If both input and reaction are correct input, return the first event met.\n\n        Args:\n            member (Discord.Member): Member who called help. Help will be\n                displayed as a private message to him.\n            message (Discord.Message): Message sent by the bot, where the user\n                should react.\n            current_page (Page): Page being displayed. We know what kind of\n                input we need from this page.\n\n        Returns:\n            reaction (Discord.Reaction): Reaction of the user, or None if the\n                correct input was a user message.\n            message (Discord.Message): Message of the user, or None if the\n                correct input was a user reaction.\n        \"\"\"\n\n        def check_reaction(reaction, user):\n            return user == member\n\n        def check_message(m):\n            return m.author == member\n\n        task_react = asyncio.ensure_future(self.client.wait_for(\"reaction_add\", check=check_reaction))\n        task_answer = asyncio.ensure_future(self.client.wait_for(\"message\", check=check_message))\n        tasks = [task_react]  # Always wait for user reaction\n        if current_page.need_user_input():\n            tasks.append(task_answer)  # Sometimes need to expect input too\n\n        # Wait the actual user input\n        done, _ = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n\n        # Depending on what the user did, return the right thing\n        if task_react in done:\n            # User reacted\n            reaction, _ = done.pop().result()\n            return reaction, None\n        else:\n            # User answered\n            msg = done.pop().result()\n            return None, msg\n</code></pre>"},{"location":"code_ref/#discord_interactive.help.Help.__init__","title":"<code>__init__(client, pages, callbacks=[], quit_react=DEFAULT_QUIT_REACT)</code>","text":"<p>Help constructor.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Discord.Client</code> <p>Discord client (to send messages).</p> required <code>pages</code> <code>list of Page or Page</code> <p>List of pages representing the starting point of the help.</p> required <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> <code>quit_react</code> <code>str</code> <p>Reaction used to leave the help system. Defaults to <code>\u274c</code>.</p> <code>DEFAULT_QUIT_REACT</code> Source code in <code>discord_interactive/help.py</code> <pre><code>def __init__(self, client, pages, callbacks=[], quit_react=DEFAULT_QUIT_REACT):\n\"\"\"Help constructor.\n\n    Args:\n        client (Discord.Client): Discord client (to send messages).\n        pages (list of Page or Page): List of pages representing the\n            starting point of the help.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n        quit_react (str, optional): Reaction used to leave the help system.\n            Defaults to `\u274c`.\n    \"\"\"\n    self.client = client\n    self.quit_react = quit_react\n\n    # Create a RootLink, representing the root of the help tree\n    root = RootLink(pages, callbacks)\n    self.tree = root\n</code></pre>"},{"location":"code_ref/#discord_interactive.help.Help.display","title":"<code>display(member)</code>  <code>async</code>","text":"<p>Main function of the Help system.</p> <p>This function is the main function of the help system. When a user request help, simply call this function. It will display the first message of the help, and then wait the user to react. Depending on the reaction, it will display the next page, etc...</p> <p>Parameters:</p> Name Type Description Default <code>member</code> <code>Discord.Member</code> <p>Member who called help. Help will be displayed as a private message to him.</p> required Source code in <code>discord_interactive/help.py</code> <pre><code>async def display(self, member):  # noqa: C901\n\"\"\"Main function of the Help system.\n\n    This function is the main function of the help system. When a user\n    request help, simply call this function.\n    It will display the first message of the help, and then wait the user to\n    react. Depending on the reaction, it will display the next page, etc...\n\n    Args:\n        member (Discord.Member): Member who called help. Help will be\n            displayed as a private message to him.\n    \"\"\"\n    current_link = self.tree\n    prev_input = []\n\n    # Never stop displaying help\n    while True:\n        # Run basic callbacks before displaying the page\n        for callback in current_link.callbacks:\n            await callback(current_link, member, prev_input)\n\n        # After running the callbacks, we can retrieve the page to be\n        # displayed\n        page = current_link.page()\n\n        # Send the current page to the user as private message :\n        # Ensure the channel exist\n        if member.dm_channel is None:\n            await member.create_dm()\n\n        # Different page type should be sent differently\n        if page.type == PageType.MESSAGE:\n            bot_message = await member.dm_channel.send(page.get_message())\n        elif page.type == PageType.EMBED:\n            bot_message = await member.dm_channel.send(embed=page.get_embed(), content=None)\n\n        # Display possible reactions\n        for react in page.reactions() + [self.quit_react]:\n            asyncio.ensure_future(bot_message.add_reaction(react))\n\n        next_link = None\n        # While user give wrong reaction/input, keep waiting for better input\n        while next_link is None:\n            # Get user input\n            reaction, message = await self._get_user_input(member, bot_message, page)\n\n            # 2 cases : reaction or message\n            if reaction is not None and message is None:\n                # If the user wants to quit, quit\n                if reaction.emoji == self.quit_react:\n                    # Clean and quit. This is the only way to quit for now\n                    await bot_message.delete()\n                    return\n\n                # Else, retrieve the next link based on reaction\n                next_link = page.next_link(reaction.emoji)\n\n            elif reaction is None and message is not None:\n                # Retrieve next link\n                next_link = page.next_link()\n\n        # Before going to next page, remember the input of the user if given\n        if message is not None:\n            prev_input.append(message)\n\n        # Here the next page is valid. Clean current message and loop\n        await bot_message.delete()\n        current_link = next_link\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page","title":"<code>Page</code>","text":"<p>Class representing a page of the help.</p> <p>This class represents a page of the help. A page is displayed to the user, and the user can naviguate through pages using reaction or messages. A page have several attributes : a message, and a map of linked pages, based on reaction of the user.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>Message to display to the user when displaying the page.</p> <code>links</code> <code>list of Links</code> <p>List of Links associated to this page.</p> <code>msg_link</code> <code>MsgLink</code> <p>MsgLink if there is one. It's not part of the links list because there can be only 1 msg link per page.</p> <code>parent</code> <code>Link</code> <p>Link to the parent page.</p> <code>root</code> <code>Link</code> <p>Link to the root page.</p> <code>sep</code> <code>str</code> <p>String used to separate the message and the links description (for display).</p> <code>links_sep</code> <code>str</code> <p>String used to separate the links description (between each of them) (for display).</p> <code>type</code> <code>PageType</code> <p>Type of the page. Can be <code>PageType.MESSAGE</code> or <code>PageType.EMBED</code>.</p> <code>embed_kwargs</code> <code>dict</code> <p>Others keywords arguments, used to initialize the <code>Embed</code> for display. Only used if the type of the page is <code>PageType.EMBED</code>.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>class Page:\n\"\"\"Class representing a page of the help.\n\n    This class represents a page of the help. A page is displayed to the user,\n    and the user can naviguate through pages using reaction or messages.\n    A page have several attributes : a message, and a map of linked pages,\n    based on reaction of the user.\n\n    Attributes:\n        msg (str): Message to display to the user when displaying the page.\n        links (list of Links): List of Links associated to this page.\n        msg_link (MsgLink): MsgLink if there is one. It's not part of the links\n            list because there can be only 1 msg link per page.\n        parent (Link): Link to the parent page.\n        root (Link): Link to the root page.\n        sep (str): String used to separate the message and the links description\n            (for display).\n        links_sep (str): String used to separate the links description (between\n            each of them) (for display).\n        type (PageType): Type of the page. Can be `PageType.MESSAGE` or\n            `PageType.EMBED`.\n        embed_kwargs (dict): Others keywords arguments, used to initialize\n            the `Embed` for display. Only used if the type of the page is\n            `PageType.EMBED`.\n    \"\"\"\n\n    def __init__(self, msg=\"\", sep=\"\\n\\n\", links_sep=\"\\n\", embed=True, **embed_kwargs):\nr\"\"\"Page constructor.\n\n        Constructor of the class Page. Create a Page with a message.\n\n        Args:\n            msg (str, optional): Message to display to the user when displaying\n                the page.\n            sep (str, optional): String used to separate the message and the\n                links description (for display). Defaults to `\\n\\n`.\n            links_sep (str, optional): String used to separate the links\n                description (between each of them) (for display). Defaults to\n                `\\n`.\n            embed (bool, optional): If set to `True`, create a page of type\n                `PageType.EMBED`, if `False` the page type is\n                `PageType.MESSAGE`. Defaults to `True`.\n            embed_kwargs (dict): Others keywords arguments, used to initialize\n                the `Embed` for display. Only used if the type of the page is\n                `PageType.EMBED`.\n        \"\"\"\n        self.msg = msg\n        self.links = []\n        self.msg_link = None\n        self.parent = None\n        self.root = None\n        self.sep = sep\n        self.links_sep = links_sep\n        self.type = PageType.EMBED if embed else PageType.MESSAGE\n        self.embed_kwargs = embed_kwargs\n\n    ####################### Construction of the Tree ###########################\n\n    def link(\n        self,\n        pages,\n        reaction=None,\n        description=None,\n        callbacks=[],\n        user_input=False,\n        is_parent=True,\n        parent_reaction=DEFAULT_PARENT_REACT,\n    ):\n\"\"\"Page linker with reactions.\n\n        Link a page to other pages by creating a link with reaction.\n\n        Args:\n            pages (list of Page or Page): List of pages associated to this link.\n            reaction (str, optional): Reaction needed to go through the link.\n                If None is given, use a default reaction. Defaults to `None`.\n            description (str, optional): Description of the link, to explain to\n                user the effect of this link. Defaults to `None`.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n            user_input (bool, optional): Boolean indicating if this is a MsgLink\n                or not. Defaults to `False`.\n            is_parent (bool, optional): Boolean indicating if the currentpage\n                should be represented as the parent of the pages linked.\n                Defaults to `True`.\n            parent_reaction (str or list of str, optional): Reaction to use for\n                the child to come back to its parent (current page). If a list\n                is given, each reaction is associated to one page of the list\n                of pages given. Defaults to `\ud83d\udd19`.\n\n        Throws:\n            IndexError: Only the 9 first links are provided with default\n                reactions (digit 1 ~ 9). If you try to create another link with\n                default reaction, this Exception will be thrown.\n            ValueError: The number of parent reaction given does not correspond\n                to the number of child pages.\n        \"\"\"\n        # Create the appropriate link\n        if user_input:  # Create a MsgLink\n            self.msg_link = MsgLink(pages, description, callbacks)\n        else:  # Create a ReactLink\n            # First, retrieve the default reaction if none was given\n            if reaction is None:\n                reaction = DEFAULT_LINK_REACTS[len(self.links)]\n\n            # Then create a ReactLink\n            link = ReactLink(reaction, pages, description, callbacks)\n\n            # And link it to this page\n            self.links.append(link)\n\n        # Create the parent links\n        if is_parent:\n            self.parent_of(pages, parent_reaction)\n\n    def parent_of(self, pages, parent_reaction=DEFAULT_PARENT_REACT):\n\"\"\"Parent Page linker.\n\n        Link a list of pages the current page as a parent.\n\n        Args:\n            pages (list of Page or Page): List of pages to associate the current\n                page as a parent.\n            parent_reaction (str or list of str, optional): Reaction to use for\n                the child to come back to its parent (current page). If a list\n                is given, each reaction is associated to one page of the list\n                of pages given. Defaults to `\ud83d\udd19`.\n\n        Throws:\n            ValueError: The number of parent reaction given does not correspond\n                to the number of child pages.\n        \"\"\"\n        # Normalize list of pages\n        if type(pages) != list:\n            pages = [pages]\n\n        if type(parent_reaction) == list:\n            if len(pages) != len(parent_reaction):\n                raise ValueError(\n                    \"You gave a list of reaction for the parent \"\n                    \"page, but the number of pages given are not matching this\"\n                    \" list ({} pages, but {} reactions)\".format(len(pages), len(parent_reaction))\n                )\n        else:  # Normalize list of reaction\n            parent_reaction = [parent_reaction] * len(pages)\n\n        # Assign to each page this page as parent with the right reaction\n        for p, r in zip(pages, parent_reaction):\n            # First, create the parent link\n            p_link = ReactLink(r, self)\n\n            # Then associate this link to the page\n            p.parent = p_link\n\n    def root_of(self, pages, root_reaction=DEFAULT_ROOT_REACT):\n\"\"\"Root Page linker.\n\n        Link a list of pages the current page as root.\n\n        Args:\n            pages (list of Page or Page): List of pages to associate the current\n                page as root.\n            root_reaction (str or list of str, optional): Reaction to use for\n                the pages to come back to the root (current page). If a list\n                is given, each reaction is associated to one page of the list\n                of pages given. Defaults to `\ud83d\udd1d`.\n\n        Throws:\n            ValueError: The number of root reaction given does not correspond\n                to the number of pages given.\n        \"\"\"\n        # Normalize list of pages\n        if type(pages) != list:\n            pages = [pages]\n\n        if type(root_reaction) == list:\n            if len(pages) != len(root_reaction):\n                raise ValueError(\n                    \"You gave a list of reaction for the root \"\n                    \"page, but the number of pages given are not matching this\"\n                    \" list ({} pages, but {} reactions)\".format(len(pages), len(root_reaction))\n                )\n        else:  # Normalize list of reaction\n            root_reaction = [root_reaction] * len(pages)\n\n        # Assign to each page this page as parent with the right reaction\n        for p, r in zip(pages, root_reaction):\n            # First, create the parent link\n            r_link = ReactLink(r, self)\n\n            # Then associate this link to the page\n            p.root = r_link\n\n    ######################## Display of the Tree ###############################\n\n    def get_message(self):\n\"\"\"This method is called by the Help if the page is a `PageType.MESSAGE`.\n        It returns the formatted content of the Page as a string.\n        This will display the main message of the Page, as well as the message\n        describing each Link of the Page.\n        This method simply construct the string to send to the channel.\n\n        Returns:\n            str: Content to display to user.\n        \"\"\"\n        content = self.msg\n        content += self.sep\n        content += self.links_sep.join([link.description for link in self.links if link.description is not None])\n        if self.msg_link is not None and self.msg_link.description is not None:\n            content += self.links_sep + self.msg_link.description\n        return content\n\n    def get_embed(self):\n\"\"\"This method is called by the Help if the page is a `PageType.EMBED`.\n        It returns an `Embed` object, representing the formatted page.\n        This will display the main message of the Page, as well as the message\n        describing each Link of the Page.\n\n        Returns:\n            Embed: Embed to display to user.\n        \"\"\"\n        return discord.Embed(description=self.get_message(), **self.embed_kwargs)\n\n    def reactions(self):\n\"\"\"This method is called by the Help, to retrieve the list of reactions\n        that the user can use to interact with the help.\n\n        Returns:\n            list of str: List of reactions (str) that the user can use for this\n                page.\n        \"\"\"\n        return [link.reaction for link in self._all_links()]\n\n    def need_user_input(self):\n\"\"\"Method to know if the Help display needs to wait for the user to\n        input something.\n\n        If the page contains a MsgLink, then the helper needs to wait the user\n        to input something.\n\n        Returns:\n            bool: True if there is MsgLink, False otherwise.\n        \"\"\"\n        return self.msg_link is not None\n\n    def next_link(self, reaction=None):\n\"\"\"Accessing the next Link.\n\n        This function access the next Link based on the reaction given. If the\n        reaction is `None`, retrieve the MsgLink. If the reaction is not valid\n        (no link associated to this reaction), `None` is returned.\n\n        Args:\n            reaction (str, optional): Reaction chosen by the user, representing\n                a Link. If `None`, the link returned is MsgLink. Default to None.\n\n        Returns:\n            Link or None: The next link to display, based on the reaction of\n                the user, or `None` if the choice of the user is not valid.\n        \"\"\"\n        if reaction is None:\n            return self.msg_link\n\n        next_link = None\n        for link in self._all_links():\n            if link.reaction == reaction:\n                next_link = link\n        return next_link\n\n    ############################## Private #####################################\n\n    def _all_links(self):\n\"\"\"Private function.\n\n        Return a list of available ReactLink for this page.\n\n        Returns:\n            list of ReactLink: All links.\n        \"\"\"\n        all_links = self.links\n        if self.parent is not None:\n            all_links += [self.parent]\n        if self.root is not None:\n            all_links += [self.root]\n        return all_links\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.__init__","title":"<code>__init__(msg='', sep='\\n\\n', links_sep='\\n', embed=True, **embed_kwargs)</code>","text":"<p>Page constructor.</p> <p>Constructor of the class Page. Create a Page with a message.</p> <p>Parameters:</p> Name Type Description Default <code>msg</code> <code>str</code> <p>Message to display to the user when displaying the page.</p> <code>''</code> <code>sep</code> <code>str</code> <p>String used to separate the message and the links description (for display). Defaults to <code>\\n\\n</code>.</p> <code>'\\n\\n'</code> <code>links_sep</code> <code>str</code> <p>String used to separate the links description (between each of them) (for display). Defaults to <code>\\n</code>.</p> <code>'\\n'</code> <code>embed</code> <code>bool</code> <p>If set to <code>True</code>, create a page of type <code>PageType.EMBED</code>, if <code>False</code> the page type is <code>PageType.MESSAGE</code>. Defaults to <code>True</code>.</p> <code>True</code> <code>embed_kwargs</code> <code>dict</code> <p>Others keywords arguments, used to initialize the <code>Embed</code> for display. Only used if the type of the page is <code>PageType.EMBED</code>.</p> <code>{}</code> Source code in <code>discord_interactive/page.py</code> <pre><code>def __init__(self, msg=\"\", sep=\"\\n\\n\", links_sep=\"\\n\", embed=True, **embed_kwargs):\nr\"\"\"Page constructor.\n\n    Constructor of the class Page. Create a Page with a message.\n\n    Args:\n        msg (str, optional): Message to display to the user when displaying\n            the page.\n        sep (str, optional): String used to separate the message and the\n            links description (for display). Defaults to `\\n\\n`.\n        links_sep (str, optional): String used to separate the links\n            description (between each of them) (for display). Defaults to\n            `\\n`.\n        embed (bool, optional): If set to `True`, create a page of type\n            `PageType.EMBED`, if `False` the page type is\n            `PageType.MESSAGE`. Defaults to `True`.\n        embed_kwargs (dict): Others keywords arguments, used to initialize\n            the `Embed` for display. Only used if the type of the page is\n            `PageType.EMBED`.\n    \"\"\"\n    self.msg = msg\n    self.links = []\n    self.msg_link = None\n    self.parent = None\n    self.root = None\n    self.sep = sep\n    self.links_sep = links_sep\n    self.type = PageType.EMBED if embed else PageType.MESSAGE\n    self.embed_kwargs = embed_kwargs\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.link","title":"<code>link(pages, reaction=None, description=None, callbacks=[], user_input=False, is_parent=True, parent_reaction=DEFAULT_PARENT_REACT)</code>","text":"<p>Page linker with reactions.</p> <p>Link a page to other pages by creating a link with reaction.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages associated to this link.</p> required <code>reaction</code> <code>str</code> <p>Reaction needed to go through the link. If None is given, use a default reaction. Defaults to <code>None</code>.</p> <code>None</code> <code>description</code> <code>str</code> <p>Description of the link, to explain to user the effect of this link. Defaults to <code>None</code>.</p> <code>None</code> <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> <code>user_input</code> <code>bool</code> <p>Boolean indicating if this is a MsgLink or not. Defaults to <code>False</code>.</p> <code>False</code> <code>is_parent</code> <code>bool</code> <p>Boolean indicating if the currentpage should be represented as the parent of the pages linked. Defaults to <code>True</code>.</p> <code>True</code> <code>parent_reaction</code> <code>str or list of str</code> <p>Reaction to use for the child to come back to its parent (current page). If a list is given, each reaction is associated to one page of the list of pages given. Defaults to <code>\ud83d\udd19</code>.</p> <code>DEFAULT_PARENT_REACT</code> Throws <p>IndexError: Only the 9 first links are provided with default     reactions (digit 1 ~ 9). If you try to create another link with     default reaction, this Exception will be thrown. ValueError: The number of parent reaction given does not correspond     to the number of child pages.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def link(\n    self,\n    pages,\n    reaction=None,\n    description=None,\n    callbacks=[],\n    user_input=False,\n    is_parent=True,\n    parent_reaction=DEFAULT_PARENT_REACT,\n):\n\"\"\"Page linker with reactions.\n\n    Link a page to other pages by creating a link with reaction.\n\n    Args:\n        pages (list of Page or Page): List of pages associated to this link.\n        reaction (str, optional): Reaction needed to go through the link.\n            If None is given, use a default reaction. Defaults to `None`.\n        description (str, optional): Description of the link, to explain to\n            user the effect of this link. Defaults to `None`.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n        user_input (bool, optional): Boolean indicating if this is a MsgLink\n            or not. Defaults to `False`.\n        is_parent (bool, optional): Boolean indicating if the currentpage\n            should be represented as the parent of the pages linked.\n            Defaults to `True`.\n        parent_reaction (str or list of str, optional): Reaction to use for\n            the child to come back to its parent (current page). If a list\n            is given, each reaction is associated to one page of the list\n            of pages given. Defaults to `\ud83d\udd19`.\n\n    Throws:\n        IndexError: Only the 9 first links are provided with default\n            reactions (digit 1 ~ 9). If you try to create another link with\n            default reaction, this Exception will be thrown.\n        ValueError: The number of parent reaction given does not correspond\n            to the number of child pages.\n    \"\"\"\n    # Create the appropriate link\n    if user_input:  # Create a MsgLink\n        self.msg_link = MsgLink(pages, description, callbacks)\n    else:  # Create a ReactLink\n        # First, retrieve the default reaction if none was given\n        if reaction is None:\n            reaction = DEFAULT_LINK_REACTS[len(self.links)]\n\n        # Then create a ReactLink\n        link = ReactLink(reaction, pages, description, callbacks)\n\n        # And link it to this page\n        self.links.append(link)\n\n    # Create the parent links\n    if is_parent:\n        self.parent_of(pages, parent_reaction)\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.parent_of","title":"<code>parent_of(pages, parent_reaction=DEFAULT_PARENT_REACT)</code>","text":"<p>Parent Page linker.</p> <p>Link a list of pages the current page as a parent.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages to associate the current page as a parent.</p> required <code>parent_reaction</code> <code>str or list of str</code> <p>Reaction to use for the child to come back to its parent (current page). If a list is given, each reaction is associated to one page of the list of pages given. Defaults to <code>\ud83d\udd19</code>.</p> <code>DEFAULT_PARENT_REACT</code> Throws <p>ValueError: The number of parent reaction given does not correspond     to the number of child pages.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def parent_of(self, pages, parent_reaction=DEFAULT_PARENT_REACT):\n\"\"\"Parent Page linker.\n\n    Link a list of pages the current page as a parent.\n\n    Args:\n        pages (list of Page or Page): List of pages to associate the current\n            page as a parent.\n        parent_reaction (str or list of str, optional): Reaction to use for\n            the child to come back to its parent (current page). If a list\n            is given, each reaction is associated to one page of the list\n            of pages given. Defaults to `\ud83d\udd19`.\n\n    Throws:\n        ValueError: The number of parent reaction given does not correspond\n            to the number of child pages.\n    \"\"\"\n    # Normalize list of pages\n    if type(pages) != list:\n        pages = [pages]\n\n    if type(parent_reaction) == list:\n        if len(pages) != len(parent_reaction):\n            raise ValueError(\n                \"You gave a list of reaction for the parent \"\n                \"page, but the number of pages given are not matching this\"\n                \" list ({} pages, but {} reactions)\".format(len(pages), len(parent_reaction))\n            )\n    else:  # Normalize list of reaction\n        parent_reaction = [parent_reaction] * len(pages)\n\n    # Assign to each page this page as parent with the right reaction\n    for p, r in zip(pages, parent_reaction):\n        # First, create the parent link\n        p_link = ReactLink(r, self)\n\n        # Then associate this link to the page\n        p.parent = p_link\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.root_of","title":"<code>root_of(pages, root_reaction=DEFAULT_ROOT_REACT)</code>","text":"<p>Root Page linker.</p> <p>Link a list of pages the current page as root.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages to associate the current page as root.</p> required <code>root_reaction</code> <code>str or list of str</code> <p>Reaction to use for the pages to come back to the root (current page). If a list is given, each reaction is associated to one page of the list of pages given. Defaults to <code>\ud83d\udd1d</code>.</p> <code>DEFAULT_ROOT_REACT</code> Throws <p>ValueError: The number of root reaction given does not correspond     to the number of pages given.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def root_of(self, pages, root_reaction=DEFAULT_ROOT_REACT):\n\"\"\"Root Page linker.\n\n    Link a list of pages the current page as root.\n\n    Args:\n        pages (list of Page or Page): List of pages to associate the current\n            page as root.\n        root_reaction (str or list of str, optional): Reaction to use for\n            the pages to come back to the root (current page). If a list\n            is given, each reaction is associated to one page of the list\n            of pages given. Defaults to `\ud83d\udd1d`.\n\n    Throws:\n        ValueError: The number of root reaction given does not correspond\n            to the number of pages given.\n    \"\"\"\n    # Normalize list of pages\n    if type(pages) != list:\n        pages = [pages]\n\n    if type(root_reaction) == list:\n        if len(pages) != len(root_reaction):\n            raise ValueError(\n                \"You gave a list of reaction for the root \"\n                \"page, but the number of pages given are not matching this\"\n                \" list ({} pages, but {} reactions)\".format(len(pages), len(root_reaction))\n            )\n    else:  # Normalize list of reaction\n        root_reaction = [root_reaction] * len(pages)\n\n    # Assign to each page this page as parent with the right reaction\n    for p, r in zip(pages, root_reaction):\n        # First, create the parent link\n        r_link = ReactLink(r, self)\n\n        # Then associate this link to the page\n        p.root = r_link\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.get_message","title":"<code>get_message()</code>","text":"<p>This method is called by the Help if the page is a <code>PageType.MESSAGE</code>. It returns the formatted content of the Page as a string. This will display the main message of the Page, as well as the message describing each Link of the Page. This method simply construct the string to send to the channel.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>Content to display to user.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def get_message(self):\n\"\"\"This method is called by the Help if the page is a `PageType.MESSAGE`.\n    It returns the formatted content of the Page as a string.\n    This will display the main message of the Page, as well as the message\n    describing each Link of the Page.\n    This method simply construct the string to send to the channel.\n\n    Returns:\n        str: Content to display to user.\n    \"\"\"\n    content = self.msg\n    content += self.sep\n    content += self.links_sep.join([link.description for link in self.links if link.description is not None])\n    if self.msg_link is not None and self.msg_link.description is not None:\n        content += self.links_sep + self.msg_link.description\n    return content\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.get_embed","title":"<code>get_embed()</code>","text":"<p>This method is called by the Help if the page is a <code>PageType.EMBED</code>. It returns an <code>Embed</code> object, representing the formatted page. This will display the main message of the Page, as well as the message describing each Link of the Page.</p> <p>Returns:</p> Name Type Description <code>Embed</code> <p>Embed to display to user.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def get_embed(self):\n\"\"\"This method is called by the Help if the page is a `PageType.EMBED`.\n    It returns an `Embed` object, representing the formatted page.\n    This will display the main message of the Page, as well as the message\n    describing each Link of the Page.\n\n    Returns:\n        Embed: Embed to display to user.\n    \"\"\"\n    return discord.Embed(description=self.get_message(), **self.embed_kwargs)\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.reactions","title":"<code>reactions()</code>","text":"<p>This method is called by the Help, to retrieve the list of reactions that the user can use to interact with the help.</p> <p>Returns:</p> Type Description <p>list of str: List of reactions (str) that the user can use for this page.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def reactions(self):\n\"\"\"This method is called by the Help, to retrieve the list of reactions\n    that the user can use to interact with the help.\n\n    Returns:\n        list of str: List of reactions (str) that the user can use for this\n            page.\n    \"\"\"\n    return [link.reaction for link in self._all_links()]\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.need_user_input","title":"<code>need_user_input()</code>","text":"<p>Method to know if the Help display needs to wait for the user to input something.</p> <p>If the page contains a MsgLink, then the helper needs to wait the user to input something.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if there is MsgLink, False otherwise.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def need_user_input(self):\n\"\"\"Method to know if the Help display needs to wait for the user to\n    input something.\n\n    If the page contains a MsgLink, then the helper needs to wait the user\n    to input something.\n\n    Returns:\n        bool: True if there is MsgLink, False otherwise.\n    \"\"\"\n    return self.msg_link is not None\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page.next_link","title":"<code>next_link(reaction=None)</code>","text":"<p>Accessing the next Link.</p> <p>This function access the next Link based on the reaction given. If the reaction is <code>None</code>, retrieve the MsgLink. If the reaction is not valid (no link associated to this reaction), <code>None</code> is returned.</p> <p>Parameters:</p> Name Type Description Default <code>reaction</code> <code>str</code> <p>Reaction chosen by the user, representing a Link. If <code>None</code>, the link returned is MsgLink. Default to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>Link or None: The next link to display, based on the reaction of the user, or <code>None</code> if the choice of the user is not valid.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def next_link(self, reaction=None):\n\"\"\"Accessing the next Link.\n\n    This function access the next Link based on the reaction given. If the\n    reaction is `None`, retrieve the MsgLink. If the reaction is not valid\n    (no link associated to this reaction), `None` is returned.\n\n    Args:\n        reaction (str, optional): Reaction chosen by the user, representing\n            a Link. If `None`, the link returned is MsgLink. Default to None.\n\n    Returns:\n        Link or None: The next link to display, based on the reaction of\n            the user, or `None` if the choice of the user is not valid.\n    \"\"\"\n    if reaction is None:\n        return self.msg_link\n\n    next_link = None\n    for link in self._all_links():\n        if link.reaction == reaction:\n            next_link = link\n    return next_link\n</code></pre>"},{"location":"code_ref/#discord_interactive.page.Page._all_links","title":"<code>_all_links()</code>","text":"<p>Private function.</p> <p>Return a list of available ReactLink for this page.</p> <p>Returns:</p> Type Description <p>list of ReactLink: All links.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>def _all_links(self):\n\"\"\"Private function.\n\n    Return a list of available ReactLink for this page.\n\n    Returns:\n        list of ReactLink: All links.\n    \"\"\"\n    all_links = self.links\n    if self.parent is not None:\n        all_links += [self.parent]\n    if self.root is not None:\n        all_links += [self.root]\n    return all_links\n</code></pre>"},{"location":"code_ref/#private-classes","title":"Private classes","text":"<p>Module containing the definition of the <code>Page</code> class, which is the main class to define the pages of your interactive help for your Discord bot.</p> <p>Module containing the definition of the <code>Link</code> classes. These classes are not public-facing, they are used only internally. User can create links using the <code>link()</code> method in the <code>Page</code> class.</p>"},{"location":"code_ref/#discord_interactive.page.PageType","title":"<code>PageType</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Existing type of page. The type of a page define how this page will be displayed.</p> Source code in <code>discord_interactive/page.py</code> <pre><code>class PageType(Enum):\n\"\"\"Existing type of page. The type of a page define how this page will be\n    displayed.\n    \"\"\"\n\n    MESSAGE = auto()\n    EMBED = auto()\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.Link","title":"<code>Link</code>","text":"<p>Base class for all type of link.</p> <p>Links represent branches of the help tree. All links can have callbacks, and a description. Links also have a list of child pages. Most of the time, we want simple link, so the link have a single child, which is displayed if the link is taken. But sometimes, we want something more complex, like if the user take link1, ans user is a specific role, we will display a different page. That's why links can have several child pages. By default, if callbacks does not change this behavior, the first child of the list is selected.</p> <p>Attributes:</p> Name Type Description <code>pages</code> <code>list of Page</code> <p>List of pages associated to this link.</p> <code>description</code> <code>str</code> <p>Description of this link, to explain to user the effect of this link.</p> <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link.</p> <code>path</code> <code>int</code> <p>Which child page will be displayed. Default to 0 (the first Page of the list).</p> Source code in <code>discord_interactive/link.py</code> <pre><code>class Link:\n\"\"\"Base class for all type of link.\n\n    Links represent branches of the help tree.\n    All links can have callbacks, and a description.\n    Links also have a list of child pages. Most of the time, we want simple link,\n    so the link have a single child, which is displayed if the link is taken.\n    But sometimes, we want something more complex, like if the user take link1,\n    ans user is a specific role, we will display a different page. That's why\n    links can have several child pages.\n    By default, if callbacks does not change this behavior, the first child of\n    the list is selected.\n\n    Attributes:\n        pages (list of Page): List of pages associated to this link.\n        description (str): Description of this link, to explain to user the\n            effect of this link.\n        callbacks (list): List of functions to call when taking this link.\n        path (int): Which child page will be displayed. Default to 0 (the first\n            Page of the list).\n    \"\"\"\n\n    def __init__(self, pages, description=None, callbacks=[]):\n\"\"\"Link constructor.\n\n        Create a Link with a list of child pages, a description, and\n        callbacks optionally.\n\n        Args:\n            pages (list of Page or Page): List of pages associated to this link.\n            description (str, optional): Description of this link, to explain to\n                user the effect of this link. Defaults to `None`.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n        \"\"\"\n        # Normalize input\n        if type(pages) == list:\n            self.pages = pages\n        else:\n            self.pages = [pages]\n        if type(callbacks) == list:\n            self.callbacks = callbacks\n        else:\n            self.callbacks = [callbacks]\n\n        self.description = description\n        self.path = 0\n\n    def page(self):\n\"\"\"This method is called by the Help, after calling the callbacks.\n        So the path was updated (or not) to select the right page, and we should\n        return the appropriate page.\n\n        Returns:\n            Page: The page selected by callbacks (or default choice).\n        \"\"\"\n        return self.pages[self.path]\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.Link.__init__","title":"<code>__init__(pages, description=None, callbacks=[])</code>","text":"<p>Link constructor.</p> <p>Create a Link with a list of child pages, a description, and callbacks optionally.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages associated to this link.</p> required <code>description</code> <code>str</code> <p>Description of this link, to explain to user the effect of this link. Defaults to <code>None</code>.</p> <code>None</code> <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> Source code in <code>discord_interactive/link.py</code> <pre><code>def __init__(self, pages, description=None, callbacks=[]):\n\"\"\"Link constructor.\n\n    Create a Link with a list of child pages, a description, and\n    callbacks optionally.\n\n    Args:\n        pages (list of Page or Page): List of pages associated to this link.\n        description (str, optional): Description of this link, to explain to\n            user the effect of this link. Defaults to `None`.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n    \"\"\"\n    # Normalize input\n    if type(pages) == list:\n        self.pages = pages\n    else:\n        self.pages = [pages]\n    if type(callbacks) == list:\n        self.callbacks = callbacks\n    else:\n        self.callbacks = [callbacks]\n\n    self.description = description\n    self.path = 0\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.Link.page","title":"<code>page()</code>","text":"<p>This method is called by the Help, after calling the callbacks. So the path was updated (or not) to select the right page, and we should return the appropriate page.</p> <p>Returns:</p> Name Type Description <code>Page</code> <p>The page selected by callbacks (or default choice).</p> Source code in <code>discord_interactive/link.py</code> <pre><code>def page(self):\n\"\"\"This method is called by the Help, after calling the callbacks.\n    So the path was updated (or not) to select the right page, and we should\n    return the appropriate page.\n\n    Returns:\n        Page: The page selected by callbacks (or default choice).\n    \"\"\"\n    return self.pages[self.path]\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.ReactLink","title":"<code>ReactLink</code>","text":"<p>             Bases: <code>Link</code></p> <p>Class for link using reaction to naviguate to next page.</p> <p>Attributes:</p> Name Type Description <code>reaction</code> <code>str</code> <p>Reaction needed by this link to display the page.</p> Source code in <code>discord_interactive/link.py</code> <pre><code>class ReactLink(Link):\n\"\"\"Class for link using reaction to naviguate to next page.\n\n    Attributes:\n        reaction (str): Reaction needed by this link to display the page.\n    \"\"\"\n\n    def __init__(self, reaction, pages, description=None, callbacks=[]):\n\"\"\"ReactLink constructor.\n\n        Create a ReactLink to other pages, with a reaction, and a possibly a\n        description, as well as callbacks.\n\n        Args:\n            reaction (str): Reaction needed by this link to display the page.\n            pages (list of Page or Page): Page to display when this link is used.\n            description (str, optional): Description of this link, to explain to\n                user the effect of this link. Defaults to `None`.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n        \"\"\"\n        super(ReactLink, self).__init__(pages, description, callbacks)\n        self.reaction = reaction\n\n        # We need to update the description of this link to add the reaction\n        if self.description is not None:\n            self.description = self.reaction + \" \" + self.description\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.ReactLink.__init__","title":"<code>__init__(reaction, pages, description=None, callbacks=[])</code>","text":"<p>ReactLink constructor.</p> <p>Create a ReactLink to other pages, with a reaction, and a possibly a description, as well as callbacks.</p> <p>Parameters:</p> Name Type Description Default <code>reaction</code> <code>str</code> <p>Reaction needed by this link to display the page.</p> required <code>pages</code> <code>list of Page or Page</code> <p>Page to display when this link is used.</p> required <code>description</code> <code>str</code> <p>Description of this link, to explain to user the effect of this link. Defaults to <code>None</code>.</p> <code>None</code> <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> Source code in <code>discord_interactive/link.py</code> <pre><code>def __init__(self, reaction, pages, description=None, callbacks=[]):\n\"\"\"ReactLink constructor.\n\n    Create a ReactLink to other pages, with a reaction, and a possibly a\n    description, as well as callbacks.\n\n    Args:\n        reaction (str): Reaction needed by this link to display the page.\n        pages (list of Page or Page): Page to display when this link is used.\n        description (str, optional): Description of this link, to explain to\n            user the effect of this link. Defaults to `None`.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n    \"\"\"\n    super(ReactLink, self).__init__(pages, description, callbacks)\n    self.reaction = reaction\n\n    # We need to update the description of this link to add the reaction\n    if self.description is not None:\n        self.description = self.reaction + \" \" + self.description\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.MsgLink","title":"<code>MsgLink</code>","text":"<p>             Bases: <code>Link</code></p> <p>Class for link using message to naviguate to next page.</p> Source code in <code>discord_interactive/link.py</code> <pre><code>class MsgLink(Link):\n\"\"\"Class for link using message to naviguate to next page.\"\"\"\n\n    def __init__(self, pages, description=None, callbacks=[]):\n\"\"\"MsgLink constructor.\n\n        Create a MsgLink with a list of child pages, a description, and\n        callbacks optionally.\n\n        Args:\n            pages (list of Page or Page): List of pages associated to this link.\n            description (str, optional): Description of this link, to explain to\n                user the effect of this link. Defaults to `None`.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n        \"\"\"\n        super(MsgLink, self).__init__(pages, description, callbacks)\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.MsgLink.__init__","title":"<code>__init__(pages, description=None, callbacks=[])</code>","text":"<p>MsgLink constructor.</p> <p>Create a MsgLink with a list of child pages, a description, and callbacks optionally.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages associated to this link.</p> required <code>description</code> <code>str</code> <p>Description of this link, to explain to user the effect of this link. Defaults to <code>None</code>.</p> <code>None</code> <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> Source code in <code>discord_interactive/link.py</code> <pre><code>def __init__(self, pages, description=None, callbacks=[]):\n\"\"\"MsgLink constructor.\n\n    Create a MsgLink with a list of child pages, a description, and\n    callbacks optionally.\n\n    Args:\n        pages (list of Page or Page): List of pages associated to this link.\n        description (str, optional): Description of this link, to explain to\n            user the effect of this link. Defaults to `None`.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n    \"\"\"\n    super(MsgLink, self).__init__(pages, description, callbacks)\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.RootLink","title":"<code>RootLink</code>","text":"<p>             Bases: <code>Link</code></p> <p>Class for the first link of the help tree.</p> Source code in <code>discord_interactive/link.py</code> <pre><code>class RootLink(Link):\n\"\"\"Class for the first link of the help tree.\"\"\"\n\n    def __init__(self, pages, callbacks=[]):\n\"\"\"RootLink constructor.\n\n        RootLink is like any other links (callbacks included), but there is no\n        description.\n\n        Args:\n            pages (list of Page or Page): List of pages associated to this link.\n            callbacks (list, optional): List of functions to call when taking\n                this link. Defaults to empty list.\n        \"\"\"\n        super(RootLink, self).__init__(pages, callbacks=callbacks)\n</code></pre>"},{"location":"code_ref/#discord_interactive.link.RootLink.__init__","title":"<code>__init__(pages, callbacks=[])</code>","text":"<p>RootLink constructor.</p> <p>RootLink is like any other links (callbacks included), but there is no description.</p> <p>Parameters:</p> Name Type Description Default <code>pages</code> <code>list of Page or Page</code> <p>List of pages associated to this link.</p> required <code>callbacks</code> <code>list</code> <p>List of functions to call when taking this link. Defaults to empty list.</p> <code>[]</code> Source code in <code>discord_interactive/link.py</code> <pre><code>def __init__(self, pages, callbacks=[]):\n\"\"\"RootLink constructor.\n\n    RootLink is like any other links (callbacks included), but there is no\n    description.\n\n    Args:\n        pages (list of Page or Page): List of pages associated to this link.\n        callbacks (list, optional): List of functions to call when taking\n            this link. Defaults to empty list.\n    \"\"\"\n    super(RootLink, self).__init__(pages, callbacks=callbacks)\n</code></pre>"},{"location":"customization/","title":"Customization","text":"<p>Let's see how to customize messages from the help system.</p> <p></p> <p> </p> <p>1. The title of the page. You can change it by specifying the <code>title</code> keyword argument through the Page constructor.</p> <pre><code>page_help = Page('message', title=\"Welcome to the help !\")\n</code></pre> <p> </p> <p>2. The main message of the page. You can change it through the Page constructor.</p> <pre><code>page_help = Page('Help pages are simply a tree of pages and the system navigate through this tree.')\n</code></pre> <p> </p> <p>3. The description of each link. You can change it when creating a link to a page with the link method.</p> <pre><code>page_help.link(page_react, description='What about reaction ?')\n</code></pre> <p> </p> <p>4. The emoji of reaction for a given link. You can change it when creating a link to a page with the link method. By default, the emoji used is the digit emoji.</p> <pre><code>page_help.link(page_react, description='What about reaction ?')                     # Use default emoji\npage_help.link(page_react, reaction='\ud83d\udc4c', description='What about reaction ?')      # Use customized emoji\n</code></pre> <p> </p> <p>5. The emoji for the parent page. You can change it either when creating a link to a page with the link method, or by setting a parent page separately with the parent_of method.</p> <pre><code>page_help.link(page_react, description='What about reaction ?', parent_reaction='\ud83d\udc4c')        # Specified when\n# parent reaction is automatically created when making a link\n\npage_guild.parent_of(page_guild_register, parent_reaction='\ud83d\udc4c')              # Specified when creating a new parent link\n</code></pre> <p> </p> <p>6. The emoji for the root page. You can change it when setting a root page with the root_of method.</p> <pre><code>root.root_of([page_react, page_everyone, page_slow, page_help, page_cmd], root_reaction='\ud83d\udc4c')\n</code></pre> <p> </p> <p>7. The emoji for quitting. You can change it with the Help constructor.</p> <pre><code>h = Help(client, root, quit_react='\ud83d\udc4c')\n</code></pre> <p> </p> <p>8. The color of the Embed. You can change it by specifying the <code>color</code> keyword argument through the Page constructor.</p> <pre><code>page_help = Page('message', color=0xE67E22)\n</code></pre> <p>Prior to <code>v4</code> of the package, Help was rendered as simple text message. From <code>v4</code> of the package, the Help is now rendered as <code>Embed</code> by default, because the interface looks cleaner.</p> <p>If you still want to display your page as a simple text message, you can specify it by setting the argument <code>embed</code> to <code>False</code> in the Page constructor.</p> <pre><code>page_help = Page('message', embed=False)\n</code></pre> <p>Warning</p> <p>Simple text message pages can't use <code>Embed</code> features, such as title and color.</p> <p>Tip</p> <p>If you need to customize your display further, you can always subclass <code>Page</code> and redefine <code>get_message()</code> or <code>get_embed()</code>.</p>"},{"location":"design/","title":"General Design","text":"<p>This page just describes the requirements for this package, the high-level idea of what it's trying to achieve.</p>"},{"location":"design/#what-we-want","title":"What we want","text":"<p>We want a more user-friendly way to interact with Discord bot than the basic command line.</p> <p>In order to do this, we follow the already existing idea of creating a extra-simplified UI with the reactions of Discord, as shown in the  introduction.</p> <p>We want to completely erase the use of command lines.</p> <p>In order to do this, reactions are not enough. We also need to retrieve the input of the user, display different page depending on the user and its input, etc...</p>"},{"location":"design/#requirements","title":"Requirements","text":""},{"location":"design/#basics","title":"Basics","text":"<p>Let's call the core requirement a Help system. The basic idea is that we need several pages, and a way to allow the user to navigate through the pages.</p> <p>We are going to use a tree, where each node represent a page of the help, that the user can visualize.</p> <p>Each page is linked to several child pages, and the user should be able to choose which page to display next.</p> <p></p> <p>In this example, the user start from Page 1, and depending on his choice, he can go to Page 2 or Page 3.</p>"},{"location":"design/#link-back-to-parents","title":"Link back to parents","text":"<p>To make this help system easier to naviguate, we want to add some path back to parents, so the user can as well choose to come back one step before.</p> <p></p> <p>We also add the idea of \"root\", so the user can come back to the beginning easily.</p> <p></p>"},{"location":"design/#dynamic-content-with-callbacks","title":"Dynamic content with callbacks","text":"<p>Our system so far is cool, but our system is static.</p> <p>We want to make it more dynamic. For example, let's say we want to display a page with the user's name and role in it. We are gonna need callbacks !</p> <p></p> <p>As we can see, callbacks need to be called \"in-between\" 2 pages, allowing the callback to modify the content of the next page dynamically.</p>"},{"location":"design/#more-input-from-the-user","title":"More input from the user !","text":"<p>Our system allow the user to navigate through pages using choices (Page 2 or Page 3 for example). But to add better content, we need to get more than a choice : we need inputs.</p> <p>A good example is a database search. Let's say we want to make a page where the user can search the name of a guild, and the page displayed will show information about that guild.</p> <p>So we need a special link between pages that instead of waiting for the user's reaction, will wait for the user's input.</p> <p></p> <p>Like other links, after the user input something, callbacks can be called to change the next page dynamically.</p>"},{"location":"design/#multiple-choice-links","title":"Multiple-choice links","text":"<p>Changing the next page dynamically is ok if we simply need to change one page. But it's awkward to do in the case where we want to change the path of the tree.</p> <p>To make the architecture more flexible, we associate to each link several pages, and callbacks can choose which page will be displayed (based on some information stored in database for example).</p> <p></p> <p>In this example, user will choose between page 2 and page 3, and the callback will either redirect him to page 2-1 or page 2-2, which are different and lead to different part of the help system.</p>"},{"location":"design/#the-first-page-is-like-any-other-page","title":"The first page is like any other page","text":"<p>The first page of the help should be like any other page : possibility to run callbacks before displaying it, possibility to choose between several first page depending on the callbacks.</p> <p></p>"},{"location":"design/#implementation","title":"Implementation","text":"<p>About the implementation, nothing complicated.</p> <p>We just need 2 objects to represent the tree : <code>Page</code> and <code>Link</code>.</p> <p>And we need one object to take care of all the technical stuff, roaming the tree, waiting for user's input, displaying page, etc... : <code>Help</code>.</p> <p>About the <code>Link</code> objects, we are also going to make several subclasses :</p> <ul> <li><code>ReactLink</code> : A <code>Link</code> where the user have to react (through Discord reactions).</li> <li><code>MsgLink</code> : A <code>Link</code> where the user have to input a message.</li> <li><code>RootLink</code> : A special <code>Link</code>, used at the beginning of the tree.</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#step-by-step-usage","title":"Step-by-step Usage","text":"<p>After installing the package (see Installation), import the class <code>Page</code> and <code>Help</code> into your bot's code, and define the content of each page of your help manual :</p> <pre><code>from discord_interactive import Page, Help\n\n# Define each page\nroot = Page(\"Welcome !\\n\")\npage_1 = Page(\"This is page 1\")\npage_2 = Page(\"This is page 2\")\n</code></pre> <p>Then, link the pages together :</p> <pre><code># Link pages together\npage_1.link(page_2, description=\"Click this icon to access page 2\", reaction=\"\ud83d\udca9\")\nroot.link(page_1, description=\"Click this icon to access page 1\")\n</code></pre> <p>Optionally, you can define a page as root of other pages, so the user can easily come back to the root with a specific reaction :</p> <pre><code># Set the root page as the root of other page (so user can come back with a specific reaction)\nroot.root_of([page_1, page_2])\n</code></pre> <p>Finally, create the <code>Help</code> object and display the help whenever the user call the right command :</p> <pre><code># Create the Help object\nclient = discord.Client()\nh = Help(client, root)\n\n# And display the help !\n@client.event\nasync def on_message(message):\n    if message.author != client.user:  # Do not answer to myself\n        if message.content.startswith(\"/help\"):\n            await h.display(message.author)\n</code></pre>"},{"location":"usage/#full-example","title":"Full Example","text":"<pre><code>from discord_interactive import Page, Help\n\n# Define each page\nroot = Page(\"Welcome !\\n\")\npage_1 = Page(\"This is page 1\")\npage_2 = Page(\"This is page 2\")\n\n# Link pages together\npage_1.link(page_2, description=\"Click this icon to access page 2\", reaction=\"\ud83d\udca9\")\nroot.link(page_1, description=\"Click this icon to access page 1\")\n\n# Set the root page as the root of other page (so user can come back with a specific reaction)\nroot.root_of([page_1, page_2])\n\n# Create the Help object\nclient = discord.Client()\nh = Help(client, root)\n\n...\n\n# And display the help !\n@client.event\nasync def on_message(message):\n    if message.author != client.user:  # Do not answer to myself\n        if message.content.startswith(\"/help\"):\n            await h.display(message.author)\n</code></pre>"},{"location":"usage/#experience-it","title":"Experience it !","text":"<p>You can try the interactive help in this Discord server !</p> <p>Simply join the server, and type <code>/help</code> in the chat.</p> <p>Also, take a look at the code for this interactive help ! Check out the script <code>main.py</code>.</p>"},{"location":"usage/#advanced","title":"Advanced","text":"<p>In the basic example, you saw how to display a help manual and allow the user to easily interact with this manual.</p> <p>But as we will see shortly, you can also use callbacks to bring dynamic contents to your interactive help.</p> <p>Callbacks allow you bring dynamic contents and interactions in three ways : * Update the content of the next page * Choose a path between several pages * Get user input</p>"},{"location":"usage/#callback-signature","title":"Callback Signature","text":"<p>Your callback should follow this signature :</p> <pre><code>async def callback_name(link: Link, member: discord.Member, prev_input: List[discord.Message])\n</code></pre> <p>where : * <code>link</code> is the current link being displayed to the user. * <code>member</code> is the member that is currently using the interactive help. * <code>prev_input</code> is the list of messages previously inputted but the user. If the user didn't input anything, this list is empty.</p> <p>Important</p> <p>Your callback should be asynchronous.</p>"},{"location":"usage/#updating-the-content-of-the-next-page","title":"Updating the content of the next page","text":"<p>Let's create an interactive help that display a list of names retrieved from a database (dynamically) and display them in the interactive help.</p> <p>First, we define the pages of our help :</p> <pre><code>from discord_interactive import Help, Page\n\nwelcome_page = Page(\"What would you like to do ?\\n\")\nname_display_page = Page(\"\")\n</code></pre> <p>Note</p> <p>Note that the second page has an empty content. That's because we will update the content dynamically in the callback !</p> <p>Then we define our callback, which will dynamically retrieve the list of names to display, and populate the content of the second page :</p> <pre><code>async def display_names(link, member, prev_input):\n    # Call the database and get the list of names to display\n    names = db.retrieve_names()\n\n    # We have access to the link, so we can modify its content (dynamically)\n    link.page().msg = \"List of existing users :\\n\\n\" + \"\\n\".join(names) + \"\\n\"\n</code></pre> <p>Once we have defined our callback, just create the link between the pages and add the callback there :</p> <pre><code>welcome_page.link(\n    name_display_page, description=\"Get the list of users\", callbacks=display_names\n)\n</code></pre> <p>So when the user choose that link, the callback is run and the content of the next page is updated dynamically.</p>"},{"location":"usage/#choosing-a-path-between-several-pages","title":"Choosing a path between several pages","text":"<p>Let's say you want to check the status of your database, and display a different message (success or failure) based on this. Let's see how we can do that with a callback.</p> <p>First, we define the pages of our help :</p> <pre><code>welcome_page = Page(\"Hello\")\npage_fail = Page(\"Fail\")\npage_success = Page(\"Success\")\n</code></pre> <p>Then we declare our callback, which will dynamically choose which path to follow :</p> <pre><code>async def check_status(link, member, prev_input):\n    # Check the database status\n    is_db_up = db.is_up()\n\n    if is_db_up:\n        link.path = 0\n    else:\n        link.path = 1\n</code></pre> <p>Finally, just create the link between the pages and add the callback there :</p> <pre><code>welcome_page.link([page_fail, page_success], callbacks=check_status)\n</code></pre> <p>So when the user choose that link, the callback is run and the correct next page is displayed based on the callback's execution.</p>"},{"location":"usage/#getting-users-input","title":"Getting user's input","text":"<p>You can also set the link between page to record a user's input (and use that input in your callback).</p> <p>Like before, we define our pages :</p> <pre><code>welcome_page = Page(\"Enter your name :\")\nend_page = Page(\"Thanks !\")\n</code></pre> <p>Then we define our callback, where we retrieve the user's input and save it in database :</p> <pre><code>async def save_name(link, member, prev_input):\n    # Retrieve the last input from the user\n    user_input = prev_input[-1].content\n\n    # Save it in our DB\n    db.save_name(user_input)\n</code></pre> <p>Tip</p> <p>Did you notice how I used negative index to retrieve the user input ?</p> <p>That's because <code>prev_input</code> contains all previous inputs. Here we want the last one, so we use <code>-1</code> index. But it's definitely possible to retrieve several previous inputs !</p> <p>And we create the link between the page, adding the callback and ensuring we expect a user input :</p> <pre><code>welcome_page.link(end_page, callbacks=save_name, user_input=True)\n</code></pre> <p>So when the inputs its username, the callback run and the username is saved in the database.</p>"},{"location":"usage/#advanced-usage-example","title":"Advanced Usage Example","text":"<p>As before, you can try it in this Discord server !</p> <p>Simply join the server, and type <code>/guild</code> in the chat.</p> <p>Also take a look at the code in the script <code>main.py</code>.</p>"}]}